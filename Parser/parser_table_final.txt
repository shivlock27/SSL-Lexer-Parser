S $ SKIP ::= SKIP
S id SKIP ::= SKIP
S ( SKIP ::= SKIP
S ) SKIP ::= SKIP
S { SKIP ::= SKIP
S } SKIP ::= SKIP
S main S ::= PROGRAM $
S int S ::= PROGRAM $
S float S ::= PROGRAM $
S string S ::= PROGRAM $
S char S ::= PROGRAM $
S boolean S ::= PROGRAM $
S , SKIP ::= SKIP
S ; SKIP ::= SKIP
S input SKIP ::= SKIP
S print SKIP ::= SKIP
S return SKIP ::= SKIP
S = SKIP ::= SKIP
S if SKIP ::= SKIP
S ifel SKIP ::= SKIP
S while SKIP ::= SKIP
S int_literal SKIP ::= SKIP
S float_literal SKIP ::= SKIP
S char_literal SKIP ::= SKIP
S string_literal SKIP ::= SKIP
S true SKIP ::= SKIP
S false SKIP ::= SKIP
S less_op SKIP ::= SKIP
S greater_op SKIP ::= SKIP
S less_eq_op SKIP ::= SKIP
S greater_eq_op SKIP ::= SKIP
S eq_eq_op SKIP ::= SKIP
S not_eq_op SKIP ::= SKIP
S logical_and SKIP ::= SKIP
S logical_or SKIP ::= SKIP
S ! SKIP ::= SKIP
S + SKIP ::= SKIP
S - SKIP ::= SKIP
S ^ SKIP ::= SKIP
S & SKIP ::= SKIP
S | SKIP ::= SKIP
S * SKIP ::= SKIP
S / SKIP ::= SKIP
S % SKIP ::= SKIP
PROGRAM $ SYNCH ::= SYNCH
PROGRAM id SKIP ::= SKIP
PROGRAM ( SKIP ::= SKIP
PROGRAM ) SKIP ::= SKIP
PROGRAM { SKIP ::= SKIP
PROGRAM } SKIP ::= SKIP
PROGRAM main PROGRAM ::= MAIN
PROGRAM int PROGRAM ::= FUNCTION_LIST MAIN
PROGRAM float PROGRAM ::= FUNCTION_LIST MAIN
PROGRAM string PROGRAM ::= FUNCTION_LIST MAIN
PROGRAM char PROGRAM ::= FUNCTION_LIST MAIN
PROGRAM boolean PROGRAM ::= FUNCTION_LIST MAIN
PROGRAM , SKIP ::= SKIP
PROGRAM ; SKIP ::= SKIP
PROGRAM input SKIP ::= SKIP
PROGRAM print SKIP ::= SKIP
PROGRAM return SKIP ::= SKIP
PROGRAM = SKIP ::= SKIP
PROGRAM if SKIP ::= SKIP
PROGRAM ifel SKIP ::= SKIP
PROGRAM while SKIP ::= SKIP
PROGRAM int_literal SKIP ::= SKIP
PROGRAM float_literal SKIP ::= SKIP
PROGRAM char_literal SKIP ::= SKIP
PROGRAM string_literal SKIP ::= SKIP
PROGRAM true SKIP ::= SKIP
PROGRAM false SKIP ::= SKIP
PROGRAM less_op SKIP ::= SKIP
PROGRAM greater_op SKIP ::= SKIP
PROGRAM less_eq_op SKIP ::= SKIP
PROGRAM greater_eq_op SKIP ::= SKIP
PROGRAM eq_eq_op SKIP ::= SKIP
PROGRAM not_eq_op SKIP ::= SKIP
PROGRAM logical_and SKIP ::= SKIP
PROGRAM logical_or SKIP ::= SKIP
PROGRAM ! SKIP ::= SKIP
PROGRAM + SKIP ::= SKIP
PROGRAM - SKIP ::= SKIP
PROGRAM ^ SKIP ::= SKIP
PROGRAM & SKIP ::= SKIP
PROGRAM | SKIP ::= SKIP
PROGRAM * SKIP ::= SKIP
PROGRAM / SKIP ::= SKIP
PROGRAM % SKIP ::= SKIP
FUNCTION_LIST $ SKIP ::= SKIP
FUNCTION_LIST id SKIP ::= SKIP
FUNCTION_LIST ( SKIP ::= SKIP
FUNCTION_LIST ) SKIP ::= SKIP
FUNCTION_LIST { SKIP ::= SKIP
FUNCTION_LIST } SKIP ::= SKIP
FUNCTION_LIST main SYNCH ::= SYNCH
FUNCTION_LIST int FUNCTION_LIST ::= FIRST_FUNCTION MORE_FUNCTIONS
FUNCTION_LIST float FUNCTION_LIST ::= FIRST_FUNCTION MORE_FUNCTIONS
FUNCTION_LIST string FUNCTION_LIST ::= FIRST_FUNCTION MORE_FUNCTIONS
FUNCTION_LIST char FUNCTION_LIST ::= FIRST_FUNCTION MORE_FUNCTIONS
FUNCTION_LIST boolean FUNCTION_LIST ::= FIRST_FUNCTION MORE_FUNCTIONS
FUNCTION_LIST , SKIP ::= SKIP
FUNCTION_LIST ; SKIP ::= SKIP
FUNCTION_LIST input SKIP ::= SKIP
FUNCTION_LIST print SKIP ::= SKIP
FUNCTION_LIST return SKIP ::= SKIP
FUNCTION_LIST = SKIP ::= SKIP
FUNCTION_LIST if SKIP ::= SKIP
FUNCTION_LIST ifel SKIP ::= SKIP
FUNCTION_LIST while SKIP ::= SKIP
FUNCTION_LIST int_literal SKIP ::= SKIP
FUNCTION_LIST float_literal SKIP ::= SKIP
FUNCTION_LIST char_literal SKIP ::= SKIP
FUNCTION_LIST string_literal SKIP ::= SKIP
FUNCTION_LIST true SKIP ::= SKIP
FUNCTION_LIST false SKIP ::= SKIP
FUNCTION_LIST less_op SKIP ::= SKIP
FUNCTION_LIST greater_op SKIP ::= SKIP
FUNCTION_LIST less_eq_op SKIP ::= SKIP
FUNCTION_LIST greater_eq_op SKIP ::= SKIP
FUNCTION_LIST eq_eq_op SKIP ::= SKIP
FUNCTION_LIST not_eq_op SKIP ::= SKIP
FUNCTION_LIST logical_and SKIP ::= SKIP
FUNCTION_LIST logical_or SKIP ::= SKIP
FUNCTION_LIST ! SKIP ::= SKIP
FUNCTION_LIST + SKIP ::= SKIP
FUNCTION_LIST - SKIP ::= SKIP
FUNCTION_LIST ^ SKIP ::= SKIP
FUNCTION_LIST & SKIP ::= SKIP
FUNCTION_LIST | SKIP ::= SKIP
FUNCTION_LIST * SKIP ::= SKIP
FUNCTION_LIST / SKIP ::= SKIP
FUNCTION_LIST % SKIP ::= SKIP
FIRST_FUNCTION $ SKIP ::= SKIP
FIRST_FUNCTION id SKIP ::= SKIP
FIRST_FUNCTION ( SKIP ::= SKIP
FIRST_FUNCTION ) SKIP ::= SKIP
FIRST_FUNCTION { SKIP ::= SKIP
FIRST_FUNCTION } SKIP ::= SKIP
FIRST_FUNCTION main SYNCH ::= SYNCH
FIRST_FUNCTION int FIRST_FUNCTION ::= FIRST_FUNCTION_PRE FIRST_FUNCTION_POST
FIRST_FUNCTION float FIRST_FUNCTION ::= FIRST_FUNCTION_PRE FIRST_FUNCTION_POST
FIRST_FUNCTION string FIRST_FUNCTION ::= FIRST_FUNCTION_PRE FIRST_FUNCTION_POST
FIRST_FUNCTION char FIRST_FUNCTION ::= FIRST_FUNCTION_PRE FIRST_FUNCTION_POST
FIRST_FUNCTION boolean FIRST_FUNCTION ::= FIRST_FUNCTION_PRE FIRST_FUNCTION_POST
FIRST_FUNCTION , SKIP ::= SKIP
FIRST_FUNCTION ; SKIP ::= SKIP
FIRST_FUNCTION input SKIP ::= SKIP
FIRST_FUNCTION print SKIP ::= SKIP
FIRST_FUNCTION return SKIP ::= SKIP
FIRST_FUNCTION = SKIP ::= SKIP
FIRST_FUNCTION if SKIP ::= SKIP
FIRST_FUNCTION ifel SKIP ::= SKIP
FIRST_FUNCTION while SKIP ::= SKIP
FIRST_FUNCTION int_literal SKIP ::= SKIP
FIRST_FUNCTION float_literal SKIP ::= SKIP
FIRST_FUNCTION char_literal SKIP ::= SKIP
FIRST_FUNCTION string_literal SKIP ::= SKIP
FIRST_FUNCTION true SKIP ::= SKIP
FIRST_FUNCTION false SKIP ::= SKIP
FIRST_FUNCTION less_op SKIP ::= SKIP
FIRST_FUNCTION greater_op SKIP ::= SKIP
FIRST_FUNCTION less_eq_op SKIP ::= SKIP
FIRST_FUNCTION greater_eq_op SKIP ::= SKIP
FIRST_FUNCTION eq_eq_op SKIP ::= SKIP
FIRST_FUNCTION not_eq_op SKIP ::= SKIP
FIRST_FUNCTION logical_and SKIP ::= SKIP
FIRST_FUNCTION logical_or SKIP ::= SKIP
FIRST_FUNCTION ! SKIP ::= SKIP
FIRST_FUNCTION + SKIP ::= SKIP
FIRST_FUNCTION - SKIP ::= SKIP
FIRST_FUNCTION ^ SKIP ::= SKIP
FIRST_FUNCTION & SKIP ::= SKIP
FIRST_FUNCTION | SKIP ::= SKIP
FIRST_FUNCTION * SKIP ::= SKIP
FIRST_FUNCTION / SKIP ::= SKIP
FIRST_FUNCTION % SKIP ::= SKIP
FIRST_FUNCTION_PRE $ SKIP ::= SKIP
FIRST_FUNCTION_PRE id SKIP ::= SKIP
FIRST_FUNCTION_PRE ( SKIP ::= SKIP
FIRST_FUNCTION_PRE ) SYNCH ::= SYNCH
FIRST_FUNCTION_PRE { SKIP ::= SKIP
FIRST_FUNCTION_PRE } SKIP ::= SKIP
FIRST_FUNCTION_PRE main SKIP ::= SKIP
FIRST_FUNCTION_PRE int FIRST_FUNCTION_PRE ::= TYPE id (
FIRST_FUNCTION_PRE float FIRST_FUNCTION_PRE ::= TYPE id (
FIRST_FUNCTION_PRE string FIRST_FUNCTION_PRE ::= TYPE id (
FIRST_FUNCTION_PRE char FIRST_FUNCTION_PRE ::= TYPE id (
FIRST_FUNCTION_PRE boolean FIRST_FUNCTION_PRE ::= TYPE id (
FIRST_FUNCTION_PRE , SKIP ::= SKIP
FIRST_FUNCTION_PRE ; SKIP ::= SKIP
FIRST_FUNCTION_PRE input SKIP ::= SKIP
FIRST_FUNCTION_PRE print SKIP ::= SKIP
FIRST_FUNCTION_PRE return SKIP ::= SKIP
FIRST_FUNCTION_PRE = SKIP ::= SKIP
FIRST_FUNCTION_PRE if SKIP ::= SKIP
FIRST_FUNCTION_PRE ifel SKIP ::= SKIP
FIRST_FUNCTION_PRE while SKIP ::= SKIP
FIRST_FUNCTION_PRE int_literal SKIP ::= SKIP
FIRST_FUNCTION_PRE float_literal SKIP ::= SKIP
FIRST_FUNCTION_PRE char_literal SKIP ::= SKIP
FIRST_FUNCTION_PRE string_literal SKIP ::= SKIP
FIRST_FUNCTION_PRE true SKIP ::= SKIP
FIRST_FUNCTION_PRE false SKIP ::= SKIP
FIRST_FUNCTION_PRE less_op SKIP ::= SKIP
FIRST_FUNCTION_PRE greater_op SKIP ::= SKIP
FIRST_FUNCTION_PRE less_eq_op SKIP ::= SKIP
FIRST_FUNCTION_PRE greater_eq_op SKIP ::= SKIP
FIRST_FUNCTION_PRE eq_eq_op SKIP ::= SKIP
FIRST_FUNCTION_PRE not_eq_op SKIP ::= SKIP
FIRST_FUNCTION_PRE logical_and SKIP ::= SKIP
FIRST_FUNCTION_PRE logical_or SKIP ::= SKIP
FIRST_FUNCTION_PRE ! SKIP ::= SKIP
FIRST_FUNCTION_PRE + SKIP ::= SKIP
FIRST_FUNCTION_PRE - SKIP ::= SKIP
FIRST_FUNCTION_PRE ^ SKIP ::= SKIP
FIRST_FUNCTION_PRE & SKIP ::= SKIP
FIRST_FUNCTION_PRE | SKIP ::= SKIP
FIRST_FUNCTION_PRE * SKIP ::= SKIP
FIRST_FUNCTION_PRE / SKIP ::= SKIP
FIRST_FUNCTION_PRE % SKIP ::= SKIP
FIRST_FUNCTION_POST $ SKIP ::= SKIP
FIRST_FUNCTION_POST id SKIP ::= SKIP
FIRST_FUNCTION_POST ( SKIP ::= SKIP
FIRST_FUNCTION_POST ) FIRST_FUNCTION_POST ::= ) { STMTS }
FIRST_FUNCTION_POST { SKIP ::= SKIP
FIRST_FUNCTION_POST } SKIP ::= SKIP
FIRST_FUNCTION_POST main SYNCH ::= SYNCH
FIRST_FUNCTION_POST int FIRST_FUNCTION_POST ::= FORMAL_PARAMS ) { STMTS }
FIRST_FUNCTION_POST float FIRST_FUNCTION_POST ::= FORMAL_PARAMS ) { STMTS }
FIRST_FUNCTION_POST string FIRST_FUNCTION_POST ::= FORMAL_PARAMS ) { STMTS }
FIRST_FUNCTION_POST char FIRST_FUNCTION_POST ::= FORMAL_PARAMS ) { STMTS }
FIRST_FUNCTION_POST boolean FIRST_FUNCTION_POST ::= FORMAL_PARAMS ) { STMTS }
FIRST_FUNCTION_POST , SKIP ::= SKIP
FIRST_FUNCTION_POST ; SKIP ::= SKIP
FIRST_FUNCTION_POST input SKIP ::= SKIP
FIRST_FUNCTION_POST print SKIP ::= SKIP
FIRST_FUNCTION_POST return SKIP ::= SKIP
FIRST_FUNCTION_POST = SKIP ::= SKIP
FIRST_FUNCTION_POST if SKIP ::= SKIP
FIRST_FUNCTION_POST ifel SKIP ::= SKIP
FIRST_FUNCTION_POST while SKIP ::= SKIP
FIRST_FUNCTION_POST int_literal SKIP ::= SKIP
FIRST_FUNCTION_POST float_literal SKIP ::= SKIP
FIRST_FUNCTION_POST char_literal SKIP ::= SKIP
FIRST_FUNCTION_POST string_literal SKIP ::= SKIP
FIRST_FUNCTION_POST true SKIP ::= SKIP
FIRST_FUNCTION_POST false SKIP ::= SKIP
FIRST_FUNCTION_POST less_op SKIP ::= SKIP
FIRST_FUNCTION_POST greater_op SKIP ::= SKIP
FIRST_FUNCTION_POST less_eq_op SKIP ::= SKIP
FIRST_FUNCTION_POST greater_eq_op SKIP ::= SKIP
FIRST_FUNCTION_POST eq_eq_op SKIP ::= SKIP
FIRST_FUNCTION_POST not_eq_op SKIP ::= SKIP
FIRST_FUNCTION_POST logical_and SKIP ::= SKIP
FIRST_FUNCTION_POST logical_or SKIP ::= SKIP
FIRST_FUNCTION_POST ! SKIP ::= SKIP
FIRST_FUNCTION_POST + SKIP ::= SKIP
FIRST_FUNCTION_POST - SKIP ::= SKIP
FIRST_FUNCTION_POST ^ SKIP ::= SKIP
FIRST_FUNCTION_POST & SKIP ::= SKIP
FIRST_FUNCTION_POST | SKIP ::= SKIP
FIRST_FUNCTION_POST * SKIP ::= SKIP
FIRST_FUNCTION_POST / SKIP ::= SKIP
FIRST_FUNCTION_POST % SKIP ::= SKIP
MORE_FUNCTIONS $ SKIP ::= SKIP
MORE_FUNCTIONS id SKIP ::= SKIP
MORE_FUNCTIONS ( SKIP ::= SKIP
MORE_FUNCTIONS ) SKIP ::= SKIP
MORE_FUNCTIONS { SKIP ::= SKIP
MORE_FUNCTIONS } SKIP ::= SKIP
MORE_FUNCTIONS main MORE_FUNCTIONS ::= ssc
MORE_FUNCTIONS int MORE_FUNCTIONS ::= FIRST_FUNCTION
MORE_FUNCTIONS float MORE_FUNCTIONS ::= FIRST_FUNCTION
MORE_FUNCTIONS string MORE_FUNCTIONS ::= FIRST_FUNCTION
MORE_FUNCTIONS char MORE_FUNCTIONS ::= FIRST_FUNCTION
MORE_FUNCTIONS boolean MORE_FUNCTIONS ::= FIRST_FUNCTION
MORE_FUNCTIONS , SKIP ::= SKIP
MORE_FUNCTIONS ; SKIP ::= SKIP
MORE_FUNCTIONS input SKIP ::= SKIP
MORE_FUNCTIONS print SKIP ::= SKIP
MORE_FUNCTIONS return SKIP ::= SKIP
MORE_FUNCTIONS = SKIP ::= SKIP
MORE_FUNCTIONS if SKIP ::= SKIP
MORE_FUNCTIONS ifel SKIP ::= SKIP
MORE_FUNCTIONS while SKIP ::= SKIP
MORE_FUNCTIONS int_literal SKIP ::= SKIP
MORE_FUNCTIONS float_literal SKIP ::= SKIP
MORE_FUNCTIONS char_literal SKIP ::= SKIP
MORE_FUNCTIONS string_literal SKIP ::= SKIP
MORE_FUNCTIONS true SKIP ::= SKIP
MORE_FUNCTIONS false SKIP ::= SKIP
MORE_FUNCTIONS less_op SKIP ::= SKIP
MORE_FUNCTIONS greater_op SKIP ::= SKIP
MORE_FUNCTIONS less_eq_op SKIP ::= SKIP
MORE_FUNCTIONS greater_eq_op SKIP ::= SKIP
MORE_FUNCTIONS eq_eq_op SKIP ::= SKIP
MORE_FUNCTIONS not_eq_op SKIP ::= SKIP
MORE_FUNCTIONS logical_and SKIP ::= SKIP
MORE_FUNCTIONS logical_or SKIP ::= SKIP
MORE_FUNCTIONS ! SKIP ::= SKIP
MORE_FUNCTIONS + SKIP ::= SKIP
MORE_FUNCTIONS - SKIP ::= SKIP
MORE_FUNCTIONS ^ SKIP ::= SKIP
MORE_FUNCTIONS & SKIP ::= SKIP
MORE_FUNCTIONS | SKIP ::= SKIP
MORE_FUNCTIONS * SKIP ::= SKIP
MORE_FUNCTIONS / SKIP ::= SKIP
MORE_FUNCTIONS % SKIP ::= SKIP
MAIN $ SYNCH ::= SYNCH
MAIN id SKIP ::= SKIP
MAIN ( SKIP ::= SKIP
MAIN ) SKIP ::= SKIP
MAIN { SKIP ::= SKIP
MAIN } SKIP ::= SKIP
MAIN main MAIN ::= main ( ) { STMTS }
MAIN int SKIP ::= SKIP
MAIN float SKIP ::= SKIP
MAIN string SKIP ::= SKIP
MAIN char SKIP ::= SKIP
MAIN boolean SKIP ::= SKIP
MAIN , SKIP ::= SKIP
MAIN ; SKIP ::= SKIP
MAIN input SKIP ::= SKIP
MAIN print SKIP ::= SKIP
MAIN return SKIP ::= SKIP
MAIN = SKIP ::= SKIP
MAIN if SKIP ::= SKIP
MAIN ifel SKIP ::= SKIP
MAIN while SKIP ::= SKIP
MAIN int_literal SKIP ::= SKIP
MAIN float_literal SKIP ::= SKIP
MAIN char_literal SKIP ::= SKIP
MAIN string_literal SKIP ::= SKIP
MAIN true SKIP ::= SKIP
MAIN false SKIP ::= SKIP
MAIN less_op SKIP ::= SKIP
MAIN greater_op SKIP ::= SKIP
MAIN less_eq_op SKIP ::= SKIP
MAIN greater_eq_op SKIP ::= SKIP
MAIN eq_eq_op SKIP ::= SKIP
MAIN not_eq_op SKIP ::= SKIP
MAIN logical_and SKIP ::= SKIP
MAIN logical_or SKIP ::= SKIP
MAIN ! SKIP ::= SKIP
MAIN + SKIP ::= SKIP
MAIN - SKIP ::= SKIP
MAIN ^ SKIP ::= SKIP
MAIN & SKIP ::= SKIP
MAIN | SKIP ::= SKIP
MAIN * SKIP ::= SKIP
MAIN / SKIP ::= SKIP
MAIN % SKIP ::= SKIP
TYPE $ SKIP ::= SKIP
TYPE id SYNCH ::= SYNCH
TYPE ( SKIP ::= SKIP
TYPE ) SKIP ::= SKIP
TYPE { SKIP ::= SKIP
TYPE } SKIP ::= SKIP
TYPE main SKIP ::= SKIP
TYPE int TYPE ::= int
TYPE float TYPE ::= float
TYPE string TYPE ::= string
TYPE char TYPE ::= char
TYPE boolean TYPE ::= boolean
TYPE , SKIP ::= SKIP
TYPE ; SKIP ::= SKIP
TYPE input SKIP ::= SKIP
TYPE print SKIP ::= SKIP
TYPE return SKIP ::= SKIP
TYPE = SKIP ::= SKIP
TYPE if SKIP ::= SKIP
TYPE ifel SKIP ::= SKIP
TYPE while SKIP ::= SKIP
TYPE int_literal SKIP ::= SKIP
TYPE float_literal SKIP ::= SKIP
TYPE char_literal SKIP ::= SKIP
TYPE string_literal SKIP ::= SKIP
TYPE true SKIP ::= SKIP
TYPE false SKIP ::= SKIP
TYPE less_op SKIP ::= SKIP
TYPE greater_op SKIP ::= SKIP
TYPE less_eq_op SKIP ::= SKIP
TYPE greater_eq_op SKIP ::= SKIP
TYPE eq_eq_op SKIP ::= SKIP
TYPE not_eq_op SKIP ::= SKIP
TYPE logical_and SKIP ::= SKIP
TYPE logical_or SKIP ::= SKIP
TYPE ! SKIP ::= SKIP
TYPE + SKIP ::= SKIP
TYPE - SKIP ::= SKIP
TYPE ^ SKIP ::= SKIP
TYPE & SKIP ::= SKIP
TYPE | SKIP ::= SKIP
TYPE * SKIP ::= SKIP
TYPE / SKIP ::= SKIP
TYPE % SKIP ::= SKIP
FORMAL_PARAMS $ SKIP ::= SKIP
FORMAL_PARAMS id SKIP ::= SKIP
FORMAL_PARAMS ( SKIP ::= SKIP
FORMAL_PARAMS ) SYNCH ::= SYNCH
FORMAL_PARAMS { SKIP ::= SKIP
FORMAL_PARAMS } SKIP ::= SKIP
FORMAL_PARAMS main SKIP ::= SKIP
FORMAL_PARAMS int FORMAL_PARAMS ::= FORMAL_PARAMS_PRE FORMAL_PARAMS_POST
FORMAL_PARAMS float FORMAL_PARAMS ::= FORMAL_PARAMS_PRE FORMAL_PARAMS_POST
FORMAL_PARAMS string FORMAL_PARAMS ::= FORMAL_PARAMS_PRE FORMAL_PARAMS_POST
FORMAL_PARAMS char FORMAL_PARAMS ::= FORMAL_PARAMS_PRE FORMAL_PARAMS_POST
FORMAL_PARAMS boolean FORMAL_PARAMS ::= FORMAL_PARAMS_PRE FORMAL_PARAMS_POST
FORMAL_PARAMS , SKIP ::= SKIP
FORMAL_PARAMS ; SKIP ::= SKIP
FORMAL_PARAMS input SKIP ::= SKIP
FORMAL_PARAMS print SKIP ::= SKIP
FORMAL_PARAMS return SKIP ::= SKIP
FORMAL_PARAMS = SKIP ::= SKIP
FORMAL_PARAMS if SKIP ::= SKIP
FORMAL_PARAMS ifel SKIP ::= SKIP
FORMAL_PARAMS while SKIP ::= SKIP
FORMAL_PARAMS int_literal SKIP ::= SKIP
FORMAL_PARAMS float_literal SKIP ::= SKIP
FORMAL_PARAMS char_literal SKIP ::= SKIP
FORMAL_PARAMS string_literal SKIP ::= SKIP
FORMAL_PARAMS true SKIP ::= SKIP
FORMAL_PARAMS false SKIP ::= SKIP
FORMAL_PARAMS less_op SKIP ::= SKIP
FORMAL_PARAMS greater_op SKIP ::= SKIP
FORMAL_PARAMS less_eq_op SKIP ::= SKIP
FORMAL_PARAMS greater_eq_op SKIP ::= SKIP
FORMAL_PARAMS eq_eq_op SKIP ::= SKIP
FORMAL_PARAMS not_eq_op SKIP ::= SKIP
FORMAL_PARAMS logical_and SKIP ::= SKIP
FORMAL_PARAMS logical_or SKIP ::= SKIP
FORMAL_PARAMS ! SKIP ::= SKIP
FORMAL_PARAMS + SKIP ::= SKIP
FORMAL_PARAMS - SKIP ::= SKIP
FORMAL_PARAMS ^ SKIP ::= SKIP
FORMAL_PARAMS & SKIP ::= SKIP
FORMAL_PARAMS | SKIP ::= SKIP
FORMAL_PARAMS * SKIP ::= SKIP
FORMAL_PARAMS / SKIP ::= SKIP
FORMAL_PARAMS % SKIP ::= SKIP
FORMAL_PARAMS_POST $ SKIP ::= SKIP
FORMAL_PARAMS_POST id SKIP ::= SKIP
FORMAL_PARAMS_POST ( SKIP ::= SKIP
FORMAL_PARAMS_POST ) FORMAL_PARAMS_POST ::= ssc
FORMAL_PARAMS_POST { SKIP ::= SKIP
FORMAL_PARAMS_POST } SKIP ::= SKIP
FORMAL_PARAMS_POST main SKIP ::= SKIP
FORMAL_PARAMS_POST int SKIP ::= SKIP
FORMAL_PARAMS_POST float SKIP ::= SKIP
FORMAL_PARAMS_POST string SKIP ::= SKIP
FORMAL_PARAMS_POST char SKIP ::= SKIP
FORMAL_PARAMS_POST boolean SKIP ::= SKIP
FORMAL_PARAMS_POST , FORMAL_PARAMS_POST ::= , FORMAL_PARAMS
FORMAL_PARAMS_POST ; SKIP ::= SKIP
FORMAL_PARAMS_POST input SKIP ::= SKIP
FORMAL_PARAMS_POST print SKIP ::= SKIP
FORMAL_PARAMS_POST return SKIP ::= SKIP
FORMAL_PARAMS_POST = SKIP ::= SKIP
FORMAL_PARAMS_POST if SKIP ::= SKIP
FORMAL_PARAMS_POST ifel SKIP ::= SKIP
FORMAL_PARAMS_POST while SKIP ::= SKIP
FORMAL_PARAMS_POST int_literal SKIP ::= SKIP
FORMAL_PARAMS_POST float_literal SKIP ::= SKIP
FORMAL_PARAMS_POST char_literal SKIP ::= SKIP
FORMAL_PARAMS_POST string_literal SKIP ::= SKIP
FORMAL_PARAMS_POST true SKIP ::= SKIP
FORMAL_PARAMS_POST false SKIP ::= SKIP
FORMAL_PARAMS_POST less_op SKIP ::= SKIP
FORMAL_PARAMS_POST greater_op SKIP ::= SKIP
FORMAL_PARAMS_POST less_eq_op SKIP ::= SKIP
FORMAL_PARAMS_POST greater_eq_op SKIP ::= SKIP
FORMAL_PARAMS_POST eq_eq_op SKIP ::= SKIP
FORMAL_PARAMS_POST not_eq_op SKIP ::= SKIP
FORMAL_PARAMS_POST logical_and SKIP ::= SKIP
FORMAL_PARAMS_POST logical_or SKIP ::= SKIP
FORMAL_PARAMS_POST ! SKIP ::= SKIP
FORMAL_PARAMS_POST + SKIP ::= SKIP
FORMAL_PARAMS_POST - SKIP ::= SKIP
FORMAL_PARAMS_POST ^ SKIP ::= SKIP
FORMAL_PARAMS_POST & SKIP ::= SKIP
FORMAL_PARAMS_POST | SKIP ::= SKIP
FORMAL_PARAMS_POST * SKIP ::= SKIP
FORMAL_PARAMS_POST / SKIP ::= SKIP
FORMAL_PARAMS_POST % SKIP ::= SKIP
FORMAL_PARAMS_PRE $ SKIP ::= SKIP
FORMAL_PARAMS_PRE id SKIP ::= SKIP
FORMAL_PARAMS_PRE ( SKIP ::= SKIP
FORMAL_PARAMS_PRE ) SYNCH ::= SYNCH
FORMAL_PARAMS_PRE { SKIP ::= SKIP
FORMAL_PARAMS_PRE } SKIP ::= SKIP
FORMAL_PARAMS_PRE main SKIP ::= SKIP
FORMAL_PARAMS_PRE int FORMAL_PARAMS_PRE ::= TYPE id
FORMAL_PARAMS_PRE float FORMAL_PARAMS_PRE ::= TYPE id
FORMAL_PARAMS_PRE string FORMAL_PARAMS_PRE ::= TYPE id
FORMAL_PARAMS_PRE char FORMAL_PARAMS_PRE ::= TYPE id
FORMAL_PARAMS_PRE boolean FORMAL_PARAMS_PRE ::= TYPE id
FORMAL_PARAMS_PRE , SYNCH ::= SYNCH
FORMAL_PARAMS_PRE ; SKIP ::= SKIP
FORMAL_PARAMS_PRE input SKIP ::= SKIP
FORMAL_PARAMS_PRE print SKIP ::= SKIP
FORMAL_PARAMS_PRE return SKIP ::= SKIP
FORMAL_PARAMS_PRE = SKIP ::= SKIP
FORMAL_PARAMS_PRE if SKIP ::= SKIP
FORMAL_PARAMS_PRE ifel SKIP ::= SKIP
FORMAL_PARAMS_PRE while SKIP ::= SKIP
FORMAL_PARAMS_PRE int_literal SKIP ::= SKIP
FORMAL_PARAMS_PRE float_literal SKIP ::= SKIP
FORMAL_PARAMS_PRE char_literal SKIP ::= SKIP
FORMAL_PARAMS_PRE string_literal SKIP ::= SKIP
FORMAL_PARAMS_PRE true SKIP ::= SKIP
FORMAL_PARAMS_PRE false SKIP ::= SKIP
FORMAL_PARAMS_PRE less_op SKIP ::= SKIP
FORMAL_PARAMS_PRE greater_op SKIP ::= SKIP
FORMAL_PARAMS_PRE less_eq_op SKIP ::= SKIP
FORMAL_PARAMS_PRE greater_eq_op SKIP ::= SKIP
FORMAL_PARAMS_PRE eq_eq_op SKIP ::= SKIP
FORMAL_PARAMS_PRE not_eq_op SKIP ::= SKIP
FORMAL_PARAMS_PRE logical_and SKIP ::= SKIP
FORMAL_PARAMS_PRE logical_or SKIP ::= SKIP
FORMAL_PARAMS_PRE ! SKIP ::= SKIP
FORMAL_PARAMS_PRE + SKIP ::= SKIP
FORMAL_PARAMS_PRE - SKIP ::= SKIP
FORMAL_PARAMS_PRE ^ SKIP ::= SKIP
FORMAL_PARAMS_PRE & SKIP ::= SKIP
FORMAL_PARAMS_PRE | SKIP ::= SKIP
FORMAL_PARAMS_PRE * SKIP ::= SKIP
FORMAL_PARAMS_PRE / SKIP ::= SKIP
FORMAL_PARAMS_PRE % SKIP ::= SKIP
STMTS $ SKIP ::= SKIP
STMTS id STMTS ::= STMT_PRE STMT_POST
STMTS ( SKIP ::= SKIP
STMTS ) SKIP ::= SKIP
STMTS { SKIP ::= SKIP
STMTS } SYNCH ::= SYNCH
STMTS main SKIP ::= SKIP
STMTS int STMTS ::= STMT_PRE STMT_POST
STMTS float STMTS ::= STMT_PRE STMT_POST
STMTS string STMTS ::= STMT_PRE STMT_POST
STMTS char STMTS ::= STMT_PRE STMT_POST
STMTS boolean STMTS ::= STMT_PRE STMT_POST
STMTS , SKIP ::= SKIP
STMTS ; SKIP ::= SKIP
STMTS input STMTS ::= STMT_PRE STMT_POST
STMTS print STMTS ::= STMT_PRE STMT_POST
STMTS return STMTS ::= STMT_PRE STMT_POST
STMTS = SKIP ::= SKIP
STMTS if STMTS ::= STMT_PRE STMT_POST
STMTS ifel STMTS ::= STMT_PRE STMT_POST
STMTS while STMTS ::= STMT_PRE STMT_POST
STMTS int_literal SKIP ::= SKIP
STMTS float_literal SKIP ::= SKIP
STMTS char_literal SKIP ::= SKIP
STMTS string_literal SKIP ::= SKIP
STMTS true SKIP ::= SKIP
STMTS false SKIP ::= SKIP
STMTS less_op SKIP ::= SKIP
STMTS greater_op SKIP ::= SKIP
STMTS less_eq_op SKIP ::= SKIP
STMTS greater_eq_op SKIP ::= SKIP
STMTS eq_eq_op SKIP ::= SKIP
STMTS not_eq_op SKIP ::= SKIP
STMTS logical_and SKIP ::= SKIP
STMTS logical_or SKIP ::= SKIP
STMTS ! SKIP ::= SKIP
STMTS + SKIP ::= SKIP
STMTS - SKIP ::= SKIP
STMTS ^ SKIP ::= SKIP
STMTS & SKIP ::= SKIP
STMTS | SKIP ::= SKIP
STMTS * SKIP ::= SKIP
STMTS / SKIP ::= SKIP
STMTS % SKIP ::= SKIP
STMT_PRE $ SKIP ::= SKIP
STMT_PRE id STMT_PRE ::= STMT ;
STMT_PRE ( SKIP ::= SKIP
STMT_PRE ) SKIP ::= SKIP
STMT_PRE { SKIP ::= SKIP
STMT_PRE } SYNCH ::= SYNCH
STMT_PRE main SKIP ::= SKIP
STMT_PRE int STMT_PRE ::= STMT ;
STMT_PRE float STMT_PRE ::= STMT ;
STMT_PRE string STMT_PRE ::= STMT ;
STMT_PRE char STMT_PRE ::= STMT ;
STMT_PRE boolean STMT_PRE ::= STMT ;
STMT_PRE , SKIP ::= SKIP
STMT_PRE ; SKIP ::= SKIP
STMT_PRE input STMT_PRE ::= STMT ;
STMT_PRE print STMT_PRE ::= STMT ;
STMT_PRE return STMT_PRE ::= STMT ;
STMT_PRE = SKIP ::= SKIP
STMT_PRE if STMT_PRE ::= STMT ;
STMT_PRE ifel STMT_PRE ::= STMT ;
STMT_PRE while STMT_PRE ::= STMT ;
STMT_PRE int_literal SKIP ::= SKIP
STMT_PRE float_literal SKIP ::= SKIP
STMT_PRE char_literal SKIP ::= SKIP
STMT_PRE string_literal SKIP ::= SKIP
STMT_PRE true SKIP ::= SKIP
STMT_PRE false SKIP ::= SKIP
STMT_PRE less_op SKIP ::= SKIP
STMT_PRE greater_op SKIP ::= SKIP
STMT_PRE less_eq_op SKIP ::= SKIP
STMT_PRE greater_eq_op SKIP ::= SKIP
STMT_PRE eq_eq_op SKIP ::= SKIP
STMT_PRE not_eq_op SKIP ::= SKIP
STMT_PRE logical_and SKIP ::= SKIP
STMT_PRE logical_or SKIP ::= SKIP
STMT_PRE ! SKIP ::= SKIP
STMT_PRE + SKIP ::= SKIP
STMT_PRE - SKIP ::= SKIP
STMT_PRE ^ SKIP ::= SKIP
STMT_PRE & SKIP ::= SKIP
STMT_PRE | SKIP ::= SKIP
STMT_PRE * SKIP ::= SKIP
STMT_PRE / SKIP ::= SKIP
STMT_PRE % SKIP ::= SKIP
STMT_POST $ SKIP ::= SKIP
STMT_POST id STMT_POST ::= STMTS
STMT_POST ( SKIP ::= SKIP
STMT_POST ) SKIP ::= SKIP
STMT_POST { SKIP ::= SKIP
STMT_POST } STMT_POST ::= ssc
STMT_POST main SKIP ::= SKIP
STMT_POST int STMT_POST ::= STMTS
STMT_POST float STMT_POST ::= STMTS
STMT_POST string STMT_POST ::= STMTS
STMT_POST char STMT_POST ::= STMTS
STMT_POST boolean STMT_POST ::= STMTS
STMT_POST , SKIP ::= SKIP
STMT_POST ; SKIP ::= SKIP
STMT_POST input STMT_POST ::= STMTS
STMT_POST print STMT_POST ::= STMTS
STMT_POST return STMT_POST ::= STMTS
STMT_POST = SKIP ::= SKIP
STMT_POST if STMT_POST ::= STMTS
STMT_POST ifel STMT_POST ::= STMTS
STMT_POST while STMT_POST ::= STMTS
STMT_POST int_literal SKIP ::= SKIP
STMT_POST float_literal SKIP ::= SKIP
STMT_POST char_literal SKIP ::= SKIP
STMT_POST string_literal SKIP ::= SKIP
STMT_POST true SKIP ::= SKIP
STMT_POST false SKIP ::= SKIP
STMT_POST less_op SKIP ::= SKIP
STMT_POST greater_op SKIP ::= SKIP
STMT_POST less_eq_op SKIP ::= SKIP
STMT_POST greater_eq_op SKIP ::= SKIP
STMT_POST eq_eq_op SKIP ::= SKIP
STMT_POST not_eq_op SKIP ::= SKIP
STMT_POST logical_and SKIP ::= SKIP
STMT_POST logical_or SKIP ::= SKIP
STMT_POST ! SKIP ::= SKIP
STMT_POST + SKIP ::= SKIP
STMT_POST - SKIP ::= SKIP
STMT_POST ^ SKIP ::= SKIP
STMT_POST & SKIP ::= SKIP
STMT_POST | SKIP ::= SKIP
STMT_POST * SKIP ::= SKIP
STMT_POST / SKIP ::= SKIP
STMT_POST % SKIP ::= SKIP
STMT $ SKIP ::= SKIP
STMT id STMT ::= id = POS_4
STMT ( SKIP ::= SKIP
STMT ) SKIP ::= SKIP
STMT { SKIP ::= SKIP
STMT } SKIP ::= SKIP
STMT main SKIP ::= SKIP
STMT int STMT ::= TYPE id POS_3
STMT float STMT ::= TYPE id POS_3
STMT string STMT ::= TYPE id POS_3
STMT char STMT ::= TYPE id POS_3
STMT boolean STMT ::= TYPE id POS_3
STMT , SKIP ::= SKIP
STMT ; SYNCH ::= SYNCH
STMT input STMT ::= input ( id )
STMT print STMT ::= print ( PRINT_POST
STMT return STMT ::= return RETURN_POST
STMT = SKIP ::= SKIP
STMT if STMT ::= CONDITION_ST
STMT ifel STMT ::= CONDITION_ST
STMT while STMT ::= LOOP_ST
STMT int_literal SKIP ::= SKIP
STMT float_literal SKIP ::= SKIP
STMT char_literal SKIP ::= SKIP
STMT string_literal SKIP ::= SKIP
STMT true SKIP ::= SKIP
STMT false SKIP ::= SKIP
STMT less_op SKIP ::= SKIP
STMT greater_op SKIP ::= SKIP
STMT less_eq_op SKIP ::= SKIP
STMT greater_eq_op SKIP ::= SKIP
STMT eq_eq_op SKIP ::= SKIP
STMT not_eq_op SKIP ::= SKIP
STMT logical_and SKIP ::= SKIP
STMT logical_or SKIP ::= SKIP
STMT ! SKIP ::= SKIP
STMT + SKIP ::= SKIP
STMT - SKIP ::= SKIP
STMT ^ SKIP ::= SKIP
STMT & SKIP ::= SKIP
STMT | SKIP ::= SKIP
STMT * SKIP ::= SKIP
STMT / SKIP ::= SKIP
STMT % SKIP ::= SKIP
PRINT_POST $ SKIP ::= SKIP
PRINT_POST id PRINT_POST ::= id )
PRINT_POST ( SKIP ::= SKIP
PRINT_POST ) SKIP ::= SKIP
PRINT_POST { SKIP ::= SKIP
PRINT_POST } SKIP ::= SKIP
PRINT_POST main SKIP ::= SKIP
PRINT_POST int SKIP ::= SKIP
PRINT_POST float SKIP ::= SKIP
PRINT_POST string SKIP ::= SKIP
PRINT_POST char SKIP ::= SKIP
PRINT_POST boolean SKIP ::= SKIP
PRINT_POST , SKIP ::= SKIP
PRINT_POST ; SYNCH ::= SYNCH
PRINT_POST input SKIP ::= SKIP
PRINT_POST print SKIP ::= SKIP
PRINT_POST return SKIP ::= SKIP
PRINT_POST = SKIP ::= SKIP
PRINT_POST if SKIP ::= SKIP
PRINT_POST ifel SKIP ::= SKIP
PRINT_POST while SKIP ::= SKIP
PRINT_POST int_literal PRINT_POST ::= LITERAL )
PRINT_POST float_literal PRINT_POST ::= LITERAL )
PRINT_POST char_literal PRINT_POST ::= LITERAL )
PRINT_POST string_literal PRINT_POST ::= LITERAL )
PRINT_POST true PRINT_POST ::= LITERAL )
PRINT_POST false PRINT_POST ::= LITERAL )
PRINT_POST less_op SKIP ::= SKIP
PRINT_POST greater_op SKIP ::= SKIP
PRINT_POST less_eq_op SKIP ::= SKIP
PRINT_POST greater_eq_op SKIP ::= SKIP
PRINT_POST eq_eq_op SKIP ::= SKIP
PRINT_POST not_eq_op SKIP ::= SKIP
PRINT_POST logical_and SKIP ::= SKIP
PRINT_POST logical_or SKIP ::= SKIP
PRINT_POST ! SKIP ::= SKIP
PRINT_POST + SKIP ::= SKIP
PRINT_POST - SKIP ::= SKIP
PRINT_POST ^ SKIP ::= SKIP
PRINT_POST & SKIP ::= SKIP
PRINT_POST | SKIP ::= SKIP
PRINT_POST * SKIP ::= SKIP
PRINT_POST / SKIP ::= SKIP
PRINT_POST % SKIP ::= SKIP
RETURN_POST $ SKIP ::= SKIP
RETURN_POST id RETURN_POST ::= id
RETURN_POST ( SKIP ::= SKIP
RETURN_POST ) SKIP ::= SKIP
RETURN_POST { SKIP ::= SKIP
RETURN_POST } SKIP ::= SKIP
RETURN_POST main SKIP ::= SKIP
RETURN_POST int SKIP ::= SKIP
RETURN_POST float SKIP ::= SKIP
RETURN_POST string SKIP ::= SKIP
RETURN_POST char SKIP ::= SKIP
RETURN_POST boolean SKIP ::= SKIP
RETURN_POST , SKIP ::= SKIP
RETURN_POST ; SYNCH ::= SYNCH
RETURN_POST input SKIP ::= SKIP
RETURN_POST print SKIP ::= SKIP
RETURN_POST return SKIP ::= SKIP
RETURN_POST = SKIP ::= SKIP
RETURN_POST if SKIP ::= SKIP
RETURN_POST ifel SKIP ::= SKIP
RETURN_POST while SKIP ::= SKIP
RETURN_POST int_literal RETURN_POST ::= LITERAL
RETURN_POST float_literal RETURN_POST ::= LITERAL
RETURN_POST char_literal RETURN_POST ::= LITERAL
RETURN_POST string_literal RETURN_POST ::= LITERAL
RETURN_POST true RETURN_POST ::= LITERAL
RETURN_POST false RETURN_POST ::= LITERAL
RETURN_POST less_op SKIP ::= SKIP
RETURN_POST greater_op SKIP ::= SKIP
RETURN_POST less_eq_op SKIP ::= SKIP
RETURN_POST greater_eq_op SKIP ::= SKIP
RETURN_POST eq_eq_op SKIP ::= SKIP
RETURN_POST not_eq_op SKIP ::= SKIP
RETURN_POST logical_and SKIP ::= SKIP
RETURN_POST logical_or SKIP ::= SKIP
RETURN_POST ! SKIP ::= SKIP
RETURN_POST + SKIP ::= SKIP
RETURN_POST - SKIP ::= SKIP
RETURN_POST ^ SKIP ::= SKIP
RETURN_POST & SKIP ::= SKIP
RETURN_POST | SKIP ::= SKIP
RETURN_POST * SKIP ::= SKIP
RETURN_POST / SKIP ::= SKIP
RETURN_POST % SKIP ::= SKIP
POS_3 $ SKIP ::= SKIP
POS_3 id SKIP ::= SKIP
POS_3 ( SKIP ::= SKIP
POS_3 ) SKIP ::= SKIP
POS_3 { SKIP ::= SKIP
POS_3 } SKIP ::= SKIP
POS_3 main SKIP ::= SKIP
POS_3 int SKIP ::= SKIP
POS_3 float SKIP ::= SKIP
POS_3 string SKIP ::= SKIP
POS_3 char SKIP ::= SKIP
POS_3 boolean SKIP ::= SKIP
POS_3 , POS_3 ::= VARLIST_POST
POS_3 ; POS_3 ::= VARLIST_POST
POS_3 input SKIP ::= SKIP
POS_3 print SKIP ::= SKIP
POS_3 return SKIP ::= SKIP
POS_3 = POS_3 ::= = POS_4
POS_3 if SKIP ::= SKIP
POS_3 ifel SKIP ::= SKIP
POS_3 while SKIP ::= SKIP
POS_3 int_literal SKIP ::= SKIP
POS_3 float_literal SKIP ::= SKIP
POS_3 char_literal SKIP ::= SKIP
POS_3 string_literal SKIP ::= SKIP
POS_3 true SKIP ::= SKIP
POS_3 false SKIP ::= SKIP
POS_3 less_op SKIP ::= SKIP
POS_3 greater_op SKIP ::= SKIP
POS_3 less_eq_op SKIP ::= SKIP
POS_3 greater_eq_op SKIP ::= SKIP
POS_3 eq_eq_op SKIP ::= SKIP
POS_3 not_eq_op SKIP ::= SKIP
POS_3 logical_and SKIP ::= SKIP
POS_3 logical_or SKIP ::= SKIP
POS_3 ! SKIP ::= SKIP
POS_3 + SKIP ::= SKIP
POS_3 - SKIP ::= SKIP
POS_3 ^ SKIP ::= SKIP
POS_3 & SKIP ::= SKIP
POS_3 | SKIP ::= SKIP
POS_3 * SKIP ::= SKIP
POS_3 / SKIP ::= SKIP
POS_3 % SKIP ::= SKIP
POS_4 $ SKIP ::= SKIP
POS_4 id POS_4 ::= EXPR
POS_4 ( POS_4 ::= EXPR
POS_4 ) SKIP ::= SKIP
POS_4 { SKIP ::= SKIP
POS_4 } SKIP ::= SKIP
POS_4 main SKIP ::= SKIP
POS_4 int SKIP ::= SKIP
POS_4 float SKIP ::= SKIP
POS_4 string SKIP ::= SKIP
POS_4 char SKIP ::= SKIP
POS_4 boolean SKIP ::= SKIP
POS_4 , SKIP ::= SKIP
POS_4 ; SYNCH ::= SYNCH
POS_4 input SKIP ::= SKIP
POS_4 print SKIP ::= SKIP
POS_4 return POS_4 ::= return id ( POS_5
POS_4 = SKIP ::= SKIP
POS_4 if SKIP ::= SKIP
POS_4 ifel SKIP ::= SKIP
POS_4 while SKIP ::= SKIP
POS_4 int_literal POS_4 ::= EXPR
POS_4 float_literal POS_4 ::= EXPR
POS_4 char_literal POS_4 ::= EXPR
POS_4 string_literal POS_4 ::= EXPR
POS_4 true POS_4 ::= EXPR
POS_4 false POS_4 ::= EXPR
POS_4 less_op SKIP ::= SKIP
POS_4 greater_op SKIP ::= SKIP
POS_4 less_eq_op SKIP ::= SKIP
POS_4 greater_eq_op SKIP ::= SKIP
POS_4 eq_eq_op SKIP ::= SKIP
POS_4 not_eq_op SKIP ::= SKIP
POS_4 logical_and SKIP ::= SKIP
POS_4 logical_or SKIP ::= SKIP
POS_4 ! POS_4 ::= EXPR
POS_4 + SKIP ::= SKIP
POS_4 - SKIP ::= SKIP
POS_4 ^ SKIP ::= SKIP
POS_4 & SKIP ::= SKIP
POS_4 | SKIP ::= SKIP
POS_4 * SKIP ::= SKIP
POS_4 / SKIP ::= SKIP
POS_4 % SKIP ::= SKIP
POS_5 $ SKIP ::= SKIP
POS_5 id POS_5 ::= ACTUAL_PARAMS )
POS_5 ( SKIP ::= SKIP
POS_5 ) POS_5 ::= )
POS_5 { SKIP ::= SKIP
POS_5 } SKIP ::= SKIP
POS_5 main SKIP ::= SKIP
POS_5 int SKIP ::= SKIP
POS_5 float SKIP ::= SKIP
POS_5 string SKIP ::= SKIP
POS_5 char SKIP ::= SKIP
POS_5 boolean SKIP ::= SKIP
POS_5 , SKIP ::= SKIP
POS_5 ; SYNCH ::= SYNCH
POS_5 input SKIP ::= SKIP
POS_5 print SKIP ::= SKIP
POS_5 return SKIP ::= SKIP
POS_5 = SKIP ::= SKIP
POS_5 if SKIP ::= SKIP
POS_5 ifel SKIP ::= SKIP
POS_5 while SKIP ::= SKIP
POS_5 int_literal POS_5 ::= ACTUAL_PARAMS )
POS_5 float_literal POS_5 ::= ACTUAL_PARAMS )
POS_5 char_literal POS_5 ::= ACTUAL_PARAMS )
POS_5 string_literal POS_5 ::= ACTUAL_PARAMS )
POS_5 true POS_5 ::= ACTUAL_PARAMS )
POS_5 false POS_5 ::= ACTUAL_PARAMS )
POS_5 less_op SKIP ::= SKIP
POS_5 greater_op SKIP ::= SKIP
POS_5 less_eq_op SKIP ::= SKIP
POS_5 greater_eq_op SKIP ::= SKIP
POS_5 eq_eq_op SKIP ::= SKIP
POS_5 not_eq_op SKIP ::= SKIP
POS_5 logical_and SKIP ::= SKIP
POS_5 logical_or SKIP ::= SKIP
POS_5 ! SKIP ::= SKIP
POS_5 + SKIP ::= SKIP
POS_5 - SKIP ::= SKIP
POS_5 ^ SKIP ::= SKIP
POS_5 & SKIP ::= SKIP
POS_5 | SKIP ::= SKIP
POS_5 * SKIP ::= SKIP
POS_5 / SKIP ::= SKIP
POS_5 % SKIP ::= SKIP
ACTUAL_PARAMS $ SKIP ::= SKIP
ACTUAL_PARAMS id ACTUAL_PARAMS ::= ACTUAL_PARAMS_PRE ACTUAL_PARAMS_POST
ACTUAL_PARAMS ( SKIP ::= SKIP
ACTUAL_PARAMS ) SYNCH ::= SYNCH
ACTUAL_PARAMS { SKIP ::= SKIP
ACTUAL_PARAMS } SKIP ::= SKIP
ACTUAL_PARAMS main SKIP ::= SKIP
ACTUAL_PARAMS int SKIP ::= SKIP
ACTUAL_PARAMS float SKIP ::= SKIP
ACTUAL_PARAMS string SKIP ::= SKIP
ACTUAL_PARAMS char SKIP ::= SKIP
ACTUAL_PARAMS boolean SKIP ::= SKIP
ACTUAL_PARAMS , SKIP ::= SKIP
ACTUAL_PARAMS ; SKIP ::= SKIP
ACTUAL_PARAMS input SKIP ::= SKIP
ACTUAL_PARAMS print SKIP ::= SKIP
ACTUAL_PARAMS return SKIP ::= SKIP
ACTUAL_PARAMS = SKIP ::= SKIP
ACTUAL_PARAMS if SKIP ::= SKIP
ACTUAL_PARAMS ifel SKIP ::= SKIP
ACTUAL_PARAMS while SKIP ::= SKIP
ACTUAL_PARAMS int_literal ACTUAL_PARAMS ::= ACTUAL_PARAMS_PRE ACTUAL_PARAMS_POST
ACTUAL_PARAMS float_literal ACTUAL_PARAMS ::= ACTUAL_PARAMS_PRE ACTUAL_PARAMS_POST
ACTUAL_PARAMS char_literal ACTUAL_PARAMS ::= ACTUAL_PARAMS_PRE ACTUAL_PARAMS_POST
ACTUAL_PARAMS string_literal ACTUAL_PARAMS ::= ACTUAL_PARAMS_PRE ACTUAL_PARAMS_POST
ACTUAL_PARAMS true ACTUAL_PARAMS ::= ACTUAL_PARAMS_PRE ACTUAL_PARAMS_POST
ACTUAL_PARAMS false ACTUAL_PARAMS ::= ACTUAL_PARAMS_PRE ACTUAL_PARAMS_POST
ACTUAL_PARAMS less_op SKIP ::= SKIP
ACTUAL_PARAMS greater_op SKIP ::= SKIP
ACTUAL_PARAMS less_eq_op SKIP ::= SKIP
ACTUAL_PARAMS greater_eq_op SKIP ::= SKIP
ACTUAL_PARAMS eq_eq_op SKIP ::= SKIP
ACTUAL_PARAMS not_eq_op SKIP ::= SKIP
ACTUAL_PARAMS logical_and SKIP ::= SKIP
ACTUAL_PARAMS logical_or SKIP ::= SKIP
ACTUAL_PARAMS ! SKIP ::= SKIP
ACTUAL_PARAMS + SKIP ::= SKIP
ACTUAL_PARAMS - SKIP ::= SKIP
ACTUAL_PARAMS ^ SKIP ::= SKIP
ACTUAL_PARAMS & SKIP ::= SKIP
ACTUAL_PARAMS | SKIP ::= SKIP
ACTUAL_PARAMS * SKIP ::= SKIP
ACTUAL_PARAMS / SKIP ::= SKIP
ACTUAL_PARAMS % SKIP ::= SKIP
ACTUAL_PARAMS_PRE $ SKIP ::= SKIP
ACTUAL_PARAMS_PRE id ACTUAL_PARAMS_PRE ::= id
ACTUAL_PARAMS_PRE ( SKIP ::= SKIP
ACTUAL_PARAMS_PRE ) SYNCH ::= SYNCH
ACTUAL_PARAMS_PRE { SKIP ::= SKIP
ACTUAL_PARAMS_PRE } SKIP ::= SKIP
ACTUAL_PARAMS_PRE main SKIP ::= SKIP
ACTUAL_PARAMS_PRE int SKIP ::= SKIP
ACTUAL_PARAMS_PRE float SKIP ::= SKIP
ACTUAL_PARAMS_PRE string SKIP ::= SKIP
ACTUAL_PARAMS_PRE char SKIP ::= SKIP
ACTUAL_PARAMS_PRE boolean SKIP ::= SKIP
ACTUAL_PARAMS_PRE , SYNCH ::= SYNCH
ACTUAL_PARAMS_PRE ; SKIP ::= SKIP
ACTUAL_PARAMS_PRE input SKIP ::= SKIP
ACTUAL_PARAMS_PRE print SKIP ::= SKIP
ACTUAL_PARAMS_PRE return SKIP ::= SKIP
ACTUAL_PARAMS_PRE = SKIP ::= SKIP
ACTUAL_PARAMS_PRE if SKIP ::= SKIP
ACTUAL_PARAMS_PRE ifel SKIP ::= SKIP
ACTUAL_PARAMS_PRE while SKIP ::= SKIP
ACTUAL_PARAMS_PRE int_literal ACTUAL_PARAMS_PRE ::= LITERAL
ACTUAL_PARAMS_PRE float_literal ACTUAL_PARAMS_PRE ::= LITERAL
ACTUAL_PARAMS_PRE char_literal ACTUAL_PARAMS_PRE ::= LITERAL
ACTUAL_PARAMS_PRE string_literal ACTUAL_PARAMS_PRE ::= LITERAL
ACTUAL_PARAMS_PRE true ACTUAL_PARAMS_PRE ::= LITERAL
ACTUAL_PARAMS_PRE false ACTUAL_PARAMS_PRE ::= LITERAL
ACTUAL_PARAMS_PRE less_op SKIP ::= SKIP
ACTUAL_PARAMS_PRE greater_op SKIP ::= SKIP
ACTUAL_PARAMS_PRE less_eq_op SKIP ::= SKIP
ACTUAL_PARAMS_PRE greater_eq_op SKIP ::= SKIP
ACTUAL_PARAMS_PRE eq_eq_op SKIP ::= SKIP
ACTUAL_PARAMS_PRE not_eq_op SKIP ::= SKIP
ACTUAL_PARAMS_PRE logical_and SKIP ::= SKIP
ACTUAL_PARAMS_PRE logical_or SKIP ::= SKIP
ACTUAL_PARAMS_PRE ! SKIP ::= SKIP
ACTUAL_PARAMS_PRE + SKIP ::= SKIP
ACTUAL_PARAMS_PRE - SKIP ::= SKIP
ACTUAL_PARAMS_PRE ^ SKIP ::= SKIP
ACTUAL_PARAMS_PRE & SKIP ::= SKIP
ACTUAL_PARAMS_PRE | SKIP ::= SKIP
ACTUAL_PARAMS_PRE * SKIP ::= SKIP
ACTUAL_PARAMS_PRE / SKIP ::= SKIP
ACTUAL_PARAMS_PRE % SKIP ::= SKIP
ACTUAL_PARAMS_POST $ SKIP ::= SKIP
ACTUAL_PARAMS_POST id SKIP ::= SKIP
ACTUAL_PARAMS_POST ( SKIP ::= SKIP
ACTUAL_PARAMS_POST ) ACTUAL_PARAMS_POST ::= ssc
ACTUAL_PARAMS_POST { SKIP ::= SKIP
ACTUAL_PARAMS_POST } SKIP ::= SKIP
ACTUAL_PARAMS_POST main SKIP ::= SKIP
ACTUAL_PARAMS_POST int SKIP ::= SKIP
ACTUAL_PARAMS_POST float SKIP ::= SKIP
ACTUAL_PARAMS_POST string SKIP ::= SKIP
ACTUAL_PARAMS_POST char SKIP ::= SKIP
ACTUAL_PARAMS_POST boolean SKIP ::= SKIP
ACTUAL_PARAMS_POST , ACTUAL_PARAMS_POST ::= , ACTUAL_PARAMS
ACTUAL_PARAMS_POST ; SKIP ::= SKIP
ACTUAL_PARAMS_POST input SKIP ::= SKIP
ACTUAL_PARAMS_POST print SKIP ::= SKIP
ACTUAL_PARAMS_POST return SKIP ::= SKIP
ACTUAL_PARAMS_POST = SKIP ::= SKIP
ACTUAL_PARAMS_POST if SKIP ::= SKIP
ACTUAL_PARAMS_POST ifel SKIP ::= SKIP
ACTUAL_PARAMS_POST while SKIP ::= SKIP
ACTUAL_PARAMS_POST int_literal SKIP ::= SKIP
ACTUAL_PARAMS_POST float_literal SKIP ::= SKIP
ACTUAL_PARAMS_POST char_literal SKIP ::= SKIP
ACTUAL_PARAMS_POST string_literal SKIP ::= SKIP
ACTUAL_PARAMS_POST true SKIP ::= SKIP
ACTUAL_PARAMS_POST false SKIP ::= SKIP
ACTUAL_PARAMS_POST less_op SKIP ::= SKIP
ACTUAL_PARAMS_POST greater_op SKIP ::= SKIP
ACTUAL_PARAMS_POST less_eq_op SKIP ::= SKIP
ACTUAL_PARAMS_POST greater_eq_op SKIP ::= SKIP
ACTUAL_PARAMS_POST eq_eq_op SKIP ::= SKIP
ACTUAL_PARAMS_POST not_eq_op SKIP ::= SKIP
ACTUAL_PARAMS_POST logical_and SKIP ::= SKIP
ACTUAL_PARAMS_POST logical_or SKIP ::= SKIP
ACTUAL_PARAMS_POST ! SKIP ::= SKIP
ACTUAL_PARAMS_POST + SKIP ::= SKIP
ACTUAL_PARAMS_POST - SKIP ::= SKIP
ACTUAL_PARAMS_POST ^ SKIP ::= SKIP
ACTUAL_PARAMS_POST & SKIP ::= SKIP
ACTUAL_PARAMS_POST | SKIP ::= SKIP
ACTUAL_PARAMS_POST * SKIP ::= SKIP
ACTUAL_PARAMS_POST / SKIP ::= SKIP
ACTUAL_PARAMS_POST % SKIP ::= SKIP
VARLIST_POST $ SKIP ::= SKIP
VARLIST_POST id SKIP ::= SKIP
VARLIST_POST ( SKIP ::= SKIP
VARLIST_POST ) SKIP ::= SKIP
VARLIST_POST { SKIP ::= SKIP
VARLIST_POST } SKIP ::= SKIP
VARLIST_POST main SKIP ::= SKIP
VARLIST_POST int SKIP ::= SKIP
VARLIST_POST float SKIP ::= SKIP
VARLIST_POST string SKIP ::= SKIP
VARLIST_POST char SKIP ::= SKIP
VARLIST_POST boolean SKIP ::= SKIP
VARLIST_POST , VARLIST_POST ::= , id VARLIST_POST
VARLIST_POST ; VARLIST_POST ::= ssc
VARLIST_POST input SKIP ::= SKIP
VARLIST_POST print SKIP ::= SKIP
VARLIST_POST return SKIP ::= SKIP
VARLIST_POST = SKIP ::= SKIP
VARLIST_POST if SKIP ::= SKIP
VARLIST_POST ifel SKIP ::= SKIP
VARLIST_POST while SKIP ::= SKIP
VARLIST_POST int_literal SKIP ::= SKIP
VARLIST_POST float_literal SKIP ::= SKIP
VARLIST_POST char_literal SKIP ::= SKIP
VARLIST_POST string_literal SKIP ::= SKIP
VARLIST_POST true SKIP ::= SKIP
VARLIST_POST false SKIP ::= SKIP
VARLIST_POST less_op SKIP ::= SKIP
VARLIST_POST greater_op SKIP ::= SKIP
VARLIST_POST less_eq_op SKIP ::= SKIP
VARLIST_POST greater_eq_op SKIP ::= SKIP
VARLIST_POST eq_eq_op SKIP ::= SKIP
VARLIST_POST not_eq_op SKIP ::= SKIP
VARLIST_POST logical_and SKIP ::= SKIP
VARLIST_POST logical_or SKIP ::= SKIP
VARLIST_POST ! SKIP ::= SKIP
VARLIST_POST + SKIP ::= SKIP
VARLIST_POST - SKIP ::= SKIP
VARLIST_POST ^ SKIP ::= SKIP
VARLIST_POST & SKIP ::= SKIP
VARLIST_POST | SKIP ::= SKIP
VARLIST_POST * SKIP ::= SKIP
VARLIST_POST / SKIP ::= SKIP
VARLIST_POST % SKIP ::= SKIP
CONDITION_ST $ SKIP ::= SKIP
CONDITION_ST id SKIP ::= SKIP
CONDITION_ST ( SKIP ::= SKIP
CONDITION_ST ) SKIP ::= SKIP
CONDITION_ST { SKIP ::= SKIP
CONDITION_ST } SKIP ::= SKIP
CONDITION_ST main SKIP ::= SKIP
CONDITION_ST int SKIP ::= SKIP
CONDITION_ST float SKIP ::= SKIP
CONDITION_ST string SKIP ::= SKIP
CONDITION_ST char SKIP ::= SKIP
CONDITION_ST boolean SKIP ::= SKIP
CONDITION_ST , SKIP ::= SKIP
CONDITION_ST ; SYNCH ::= SYNCH
CONDITION_ST input SKIP ::= SKIP
CONDITION_ST print SKIP ::= SKIP
CONDITION_ST return SKIP ::= SKIP
CONDITION_ST = SKIP ::= SKIP
CONDITION_ST if CONDITION_ST ::= if ( RELN_EXPR ) { STMTS }
CONDITION_ST ifel CONDITION_ST ::= ifel ( RELN_EXPR ) { STMTS } { STMTS }
CONDITION_ST while SKIP ::= SKIP
CONDITION_ST int_literal SKIP ::= SKIP
CONDITION_ST float_literal SKIP ::= SKIP
CONDITION_ST char_literal SKIP ::= SKIP
CONDITION_ST string_literal SKIP ::= SKIP
CONDITION_ST true SKIP ::= SKIP
CONDITION_ST false SKIP ::= SKIP
CONDITION_ST less_op SKIP ::= SKIP
CONDITION_ST greater_op SKIP ::= SKIP
CONDITION_ST less_eq_op SKIP ::= SKIP
CONDITION_ST greater_eq_op SKIP ::= SKIP
CONDITION_ST eq_eq_op SKIP ::= SKIP
CONDITION_ST not_eq_op SKIP ::= SKIP
CONDITION_ST logical_and SKIP ::= SKIP
CONDITION_ST logical_or SKIP ::= SKIP
CONDITION_ST ! SKIP ::= SKIP
CONDITION_ST + SKIP ::= SKIP
CONDITION_ST - SKIP ::= SKIP
CONDITION_ST ^ SKIP ::= SKIP
CONDITION_ST & SKIP ::= SKIP
CONDITION_ST | SKIP ::= SKIP
CONDITION_ST * SKIP ::= SKIP
CONDITION_ST / SKIP ::= SKIP
CONDITION_ST % SKIP ::= SKIP
LOOP_ST $ SKIP ::= SKIP
LOOP_ST id SKIP ::= SKIP
LOOP_ST ( SKIP ::= SKIP
LOOP_ST ) SKIP ::= SKIP
LOOP_ST { SKIP ::= SKIP
LOOP_ST } SKIP ::= SKIP
LOOP_ST main SKIP ::= SKIP
LOOP_ST int SKIP ::= SKIP
LOOP_ST float SKIP ::= SKIP
LOOP_ST string SKIP ::= SKIP
LOOP_ST char SKIP ::= SKIP
LOOP_ST boolean SKIP ::= SKIP
LOOP_ST , SKIP ::= SKIP
LOOP_ST ; SYNCH ::= SYNCH
LOOP_ST input SKIP ::= SKIP
LOOP_ST print SKIP ::= SKIP
LOOP_ST return SKIP ::= SKIP
LOOP_ST = SKIP ::= SKIP
LOOP_ST if SKIP ::= SKIP
LOOP_ST ifel SKIP ::= SKIP
LOOP_ST while LOOP_ST ::= while ( RELN_EXPR ) { STMTS }
LOOP_ST int_literal SKIP ::= SKIP
LOOP_ST float_literal SKIP ::= SKIP
LOOP_ST char_literal SKIP ::= SKIP
LOOP_ST string_literal SKIP ::= SKIP
LOOP_ST true SKIP ::= SKIP
LOOP_ST false SKIP ::= SKIP
LOOP_ST less_op SKIP ::= SKIP
LOOP_ST greater_op SKIP ::= SKIP
LOOP_ST less_eq_op SKIP ::= SKIP
LOOP_ST greater_eq_op SKIP ::= SKIP
LOOP_ST eq_eq_op SKIP ::= SKIP
LOOP_ST not_eq_op SKIP ::= SKIP
LOOP_ST logical_and SKIP ::= SKIP
LOOP_ST logical_or SKIP ::= SKIP
LOOP_ST ! SKIP ::= SKIP
LOOP_ST + SKIP ::= SKIP
LOOP_ST - SKIP ::= SKIP
LOOP_ST ^ SKIP ::= SKIP
LOOP_ST & SKIP ::= SKIP
LOOP_ST | SKIP ::= SKIP
LOOP_ST * SKIP ::= SKIP
LOOP_ST / SKIP ::= SKIP
LOOP_ST % SKIP ::= SKIP
LITERAL $ SKIP ::= SKIP
LITERAL id SKIP ::= SKIP
LITERAL ( SKIP ::= SKIP
LITERAL ) SYNCH ::= SYNCH
LITERAL { SKIP ::= SKIP
LITERAL } SKIP ::= SKIP
LITERAL main SKIP ::= SKIP
LITERAL int SKIP ::= SKIP
LITERAL float SKIP ::= SKIP
LITERAL string SKIP ::= SKIP
LITERAL char SKIP ::= SKIP
LITERAL boolean SKIP ::= SKIP
LITERAL , SYNCH ::= SYNCH
LITERAL ; SYNCH ::= SYNCH
LITERAL input SKIP ::= SKIP
LITERAL print SKIP ::= SKIP
LITERAL return SKIP ::= SKIP
LITERAL = SKIP ::= SKIP
LITERAL if SKIP ::= SKIP
LITERAL ifel SKIP ::= SKIP
LITERAL while SKIP ::= SKIP
LITERAL int_literal LITERAL ::= int_literal
LITERAL float_literal LITERAL ::= float_literal
LITERAL char_literal LITERAL ::= char_literal
LITERAL string_literal LITERAL ::= string_literal
LITERAL true LITERAL ::= BOOL_LITERAL
LITERAL false LITERAL ::= BOOL_LITERAL
LITERAL less_op SYNCH ::= SYNCH
LITERAL greater_op SYNCH ::= SYNCH
LITERAL less_eq_op SYNCH ::= SYNCH
LITERAL greater_eq_op SYNCH ::= SYNCH
LITERAL eq_eq_op SYNCH ::= SYNCH
LITERAL not_eq_op SYNCH ::= SYNCH
LITERAL logical_and SYNCH ::= SYNCH
LITERAL logical_or SYNCH ::= SYNCH
LITERAL ! SKIP ::= SKIP
LITERAL + SYNCH ::= SYNCH
LITERAL - SYNCH ::= SYNCH
LITERAL ^ SYNCH ::= SYNCH
LITERAL & SYNCH ::= SYNCH
LITERAL | SYNCH ::= SYNCH
LITERAL * SYNCH ::= SYNCH
LITERAL / SYNCH ::= SYNCH
LITERAL % SYNCH ::= SYNCH
BOOL_LITERAL $ SKIP ::= SKIP
BOOL_LITERAL id SKIP ::= SKIP
BOOL_LITERAL ( SKIP ::= SKIP
BOOL_LITERAL ) SYNCH ::= SYNCH
BOOL_LITERAL { SKIP ::= SKIP
BOOL_LITERAL } SKIP ::= SKIP
BOOL_LITERAL main SKIP ::= SKIP
BOOL_LITERAL int SKIP ::= SKIP
BOOL_LITERAL float SKIP ::= SKIP
BOOL_LITERAL string SKIP ::= SKIP
BOOL_LITERAL char SKIP ::= SKIP
BOOL_LITERAL boolean SKIP ::= SKIP
BOOL_LITERAL , SYNCH ::= SYNCH
BOOL_LITERAL ; SYNCH ::= SYNCH
BOOL_LITERAL input SKIP ::= SKIP
BOOL_LITERAL print SKIP ::= SKIP
BOOL_LITERAL return SKIP ::= SKIP
BOOL_LITERAL = SKIP ::= SKIP
BOOL_LITERAL if SKIP ::= SKIP
BOOL_LITERAL ifel SKIP ::= SKIP
BOOL_LITERAL while SKIP ::= SKIP
BOOL_LITERAL int_literal SKIP ::= SKIP
BOOL_LITERAL float_literal SKIP ::= SKIP
BOOL_LITERAL char_literal SKIP ::= SKIP
BOOL_LITERAL string_literal SKIP ::= SKIP
BOOL_LITERAL true BOOL_LITERAL ::= true
BOOL_LITERAL false BOOL_LITERAL ::= false
BOOL_LITERAL less_op SYNCH ::= SYNCH
BOOL_LITERAL greater_op SYNCH ::= SYNCH
BOOL_LITERAL less_eq_op SYNCH ::= SYNCH
BOOL_LITERAL greater_eq_op SYNCH ::= SYNCH
BOOL_LITERAL eq_eq_op SYNCH ::= SYNCH
BOOL_LITERAL not_eq_op SYNCH ::= SYNCH
BOOL_LITERAL logical_and SYNCH ::= SYNCH
BOOL_LITERAL logical_or SYNCH ::= SYNCH
BOOL_LITERAL ! SKIP ::= SKIP
BOOL_LITERAL + SYNCH ::= SYNCH
BOOL_LITERAL - SYNCH ::= SYNCH
BOOL_LITERAL ^ SYNCH ::= SYNCH
BOOL_LITERAL & SYNCH ::= SYNCH
BOOL_LITERAL | SYNCH ::= SYNCH
BOOL_LITERAL * SYNCH ::= SYNCH
BOOL_LITERAL / SYNCH ::= SYNCH
BOOL_LITERAL % SYNCH ::= SYNCH
REL_OP $ SKIP ::= SKIP
REL_OP id SYNCH ::= SYNCH
REL_OP ( SYNCH ::= SYNCH
REL_OP ) SKIP ::= SKIP
REL_OP { SKIP ::= SKIP
REL_OP } SKIP ::= SKIP
REL_OP main SKIP ::= SKIP
REL_OP int SKIP ::= SKIP
REL_OP float SKIP ::= SKIP
REL_OP string SKIP ::= SKIP
REL_OP char SKIP ::= SKIP
REL_OP boolean SKIP ::= SKIP
REL_OP , SKIP ::= SKIP
REL_OP ; SKIP ::= SKIP
REL_OP input SKIP ::= SKIP
REL_OP print SKIP ::= SKIP
REL_OP return SKIP ::= SKIP
REL_OP = SKIP ::= SKIP
REL_OP if SKIP ::= SKIP
REL_OP ifel SKIP ::= SKIP
REL_OP while SKIP ::= SKIP
REL_OP int_literal SYNCH ::= SYNCH
REL_OP float_literal SYNCH ::= SYNCH
REL_OP char_literal SYNCH ::= SYNCH
REL_OP string_literal SYNCH ::= SYNCH
REL_OP true SYNCH ::= SYNCH
REL_OP false SYNCH ::= SYNCH
REL_OP less_op REL_OP ::= less_op
REL_OP greater_op REL_OP ::= greater_op
REL_OP less_eq_op REL_OP ::= less_eq_op
REL_OP greater_eq_op REL_OP ::= greater_eq_op
REL_OP eq_eq_op REL_OP ::= eq_eq_op
REL_OP not_eq_op REL_OP ::= not_eq_op
REL_OP logical_and SKIP ::= SKIP
REL_OP logical_or SKIP ::= SKIP
REL_OP ! SYNCH ::= SYNCH
REL_OP + SKIP ::= SKIP
REL_OP - SKIP ::= SKIP
REL_OP ^ SKIP ::= SKIP
REL_OP & SKIP ::= SKIP
REL_OP | SKIP ::= SKIP
REL_OP * SKIP ::= SKIP
REL_OP / SKIP ::= SKIP
REL_OP % SKIP ::= SKIP
LOG_OP $ SKIP ::= SKIP
LOG_OP id SYNCH ::= SYNCH
LOG_OP ( SYNCH ::= SYNCH
LOG_OP ) SKIP ::= SKIP
LOG_OP { SKIP ::= SKIP
LOG_OP } SKIP ::= SKIP
LOG_OP main SKIP ::= SKIP
LOG_OP int SKIP ::= SKIP
LOG_OP float SKIP ::= SKIP
LOG_OP string SKIP ::= SKIP
LOG_OP char SKIP ::= SKIP
LOG_OP boolean SKIP ::= SKIP
LOG_OP , SKIP ::= SKIP
LOG_OP ; SKIP ::= SKIP
LOG_OP input SKIP ::= SKIP
LOG_OP print SKIP ::= SKIP
LOG_OP return SKIP ::= SKIP
LOG_OP = SKIP ::= SKIP
LOG_OP if SKIP ::= SKIP
LOG_OP ifel SKIP ::= SKIP
LOG_OP while SKIP ::= SKIP
LOG_OP int_literal SYNCH ::= SYNCH
LOG_OP float_literal SYNCH ::= SYNCH
LOG_OP char_literal SYNCH ::= SYNCH
LOG_OP string_literal SYNCH ::= SYNCH
LOG_OP true SYNCH ::= SYNCH
LOG_OP false SYNCH ::= SYNCH
LOG_OP less_op SKIP ::= SKIP
LOG_OP greater_op SKIP ::= SKIP
LOG_OP less_eq_op SKIP ::= SKIP
LOG_OP greater_eq_op SKIP ::= SKIP
LOG_OP eq_eq_op SKIP ::= SKIP
LOG_OP not_eq_op SKIP ::= SKIP
LOG_OP logical_and LOG_OP ::= logical_and
LOG_OP logical_or LOG_OP ::= logical_or
LOG_OP ! SYNCH ::= SYNCH
LOG_OP + SKIP ::= SKIP
LOG_OP - SKIP ::= SKIP
LOG_OP ^ SKIP ::= SKIP
LOG_OP & SKIP ::= SKIP
LOG_OP | SKIP ::= SKIP
LOG_OP * SKIP ::= SKIP
LOG_OP / SKIP ::= SKIP
LOG_OP % SKIP ::= SKIP
RELN_EXPR $ SKIP ::= SKIP
RELN_EXPR id RELN_EXPR ::= EXPR REL_OP EXPR RELN_EXPR'
RELN_EXPR ( RELN_EXPR ::= EXPR REL_OP EXPR RELN_EXPR'
RELN_EXPR ) SYNCH ::= SYNCH
RELN_EXPR { SKIP ::= SKIP
RELN_EXPR } SKIP ::= SKIP
RELN_EXPR main SKIP ::= SKIP
RELN_EXPR int SKIP ::= SKIP
RELN_EXPR float SKIP ::= SKIP
RELN_EXPR string SKIP ::= SKIP
RELN_EXPR char SKIP ::= SKIP
RELN_EXPR boolean SKIP ::= SKIP
RELN_EXPR , SKIP ::= SKIP
RELN_EXPR ; SKIP ::= SKIP
RELN_EXPR input SKIP ::= SKIP
RELN_EXPR print SKIP ::= SKIP
RELN_EXPR return SKIP ::= SKIP
RELN_EXPR = SKIP ::= SKIP
RELN_EXPR if SKIP ::= SKIP
RELN_EXPR ifel SKIP ::= SKIP
RELN_EXPR while SKIP ::= SKIP
RELN_EXPR int_literal RELN_EXPR ::= EXPR REL_OP EXPR RELN_EXPR'
RELN_EXPR float_literal RELN_EXPR ::= EXPR REL_OP EXPR RELN_EXPR'
RELN_EXPR char_literal RELN_EXPR ::= EXPR REL_OP EXPR RELN_EXPR'
RELN_EXPR string_literal RELN_EXPR ::= EXPR REL_OP EXPR RELN_EXPR'
RELN_EXPR true RELN_EXPR ::= EXPR REL_OP EXPR RELN_EXPR'
RELN_EXPR false RELN_EXPR ::= EXPR REL_OP EXPR RELN_EXPR'
RELN_EXPR less_op SKIP ::= SKIP
RELN_EXPR greater_op SKIP ::= SKIP
RELN_EXPR less_eq_op SKIP ::= SKIP
RELN_EXPR greater_eq_op SKIP ::= SKIP
RELN_EXPR eq_eq_op SKIP ::= SKIP
RELN_EXPR not_eq_op SKIP ::= SKIP
RELN_EXPR logical_and SKIP ::= SKIP
RELN_EXPR logical_or SKIP ::= SKIP
RELN_EXPR ! RELN_EXPR ::= EXPR REL_OP EXPR RELN_EXPR'
RELN_EXPR + SKIP ::= SKIP
RELN_EXPR - SKIP ::= SKIP
RELN_EXPR ^ SKIP ::= SKIP
RELN_EXPR & SKIP ::= SKIP
RELN_EXPR | SKIP ::= SKIP
RELN_EXPR * SKIP ::= SKIP
RELN_EXPR / SKIP ::= SKIP
RELN_EXPR % SKIP ::= SKIP
RELN_EXPR' $ SKIP ::= SKIP
RELN_EXPR' id SKIP ::= SKIP
RELN_EXPR' ( SKIP ::= SKIP
RELN_EXPR' ) RELN_EXPR' ::= ssc
RELN_EXPR' { SKIP ::= SKIP
RELN_EXPR' } SKIP ::= SKIP
RELN_EXPR' main SKIP ::= SKIP
RELN_EXPR' int SKIP ::= SKIP
RELN_EXPR' float SKIP ::= SKIP
RELN_EXPR' string SKIP ::= SKIP
RELN_EXPR' char SKIP ::= SKIP
RELN_EXPR' boolean SKIP ::= SKIP
RELN_EXPR' , SKIP ::= SKIP
RELN_EXPR' ; SKIP ::= SKIP
RELN_EXPR' input SKIP ::= SKIP
RELN_EXPR' print SKIP ::= SKIP
RELN_EXPR' return SKIP ::= SKIP
RELN_EXPR' = SKIP ::= SKIP
RELN_EXPR' if SKIP ::= SKIP
RELN_EXPR' ifel SKIP ::= SKIP
RELN_EXPR' while SKIP ::= SKIP
RELN_EXPR' int_literal SKIP ::= SKIP
RELN_EXPR' float_literal SKIP ::= SKIP
RELN_EXPR' char_literal SKIP ::= SKIP
RELN_EXPR' string_literal SKIP ::= SKIP
RELN_EXPR' true SKIP ::= SKIP
RELN_EXPR' false SKIP ::= SKIP
RELN_EXPR' less_op SKIP ::= SKIP
RELN_EXPR' greater_op SKIP ::= SKIP
RELN_EXPR' less_eq_op SKIP ::= SKIP
RELN_EXPR' greater_eq_op SKIP ::= SKIP
RELN_EXPR' eq_eq_op SKIP ::= SKIP
RELN_EXPR' not_eq_op SKIP ::= SKIP
RELN_EXPR' logical_and RELN_EXPR' ::= LOG_OP RELN_EXPR
RELN_EXPR' logical_or RELN_EXPR' ::= LOG_OP RELN_EXPR
RELN_EXPR' ! SKIP ::= SKIP
RELN_EXPR' + SKIP ::= SKIP
RELN_EXPR' - SKIP ::= SKIP
RELN_EXPR' ^ SKIP ::= SKIP
RELN_EXPR' & SKIP ::= SKIP
RELN_EXPR' | SKIP ::= SKIP
RELN_EXPR' * SKIP ::= SKIP
RELN_EXPR' / SKIP ::= SKIP
RELN_EXPR' % SKIP ::= SKIP
EXPR $ SKIP ::= SKIP
EXPR id EXPR ::= TERM EXPR'
EXPR ( EXPR ::= TERM EXPR'
EXPR ) SYNCH ::= SYNCH
EXPR { SKIP ::= SKIP
EXPR } SKIP ::= SKIP
EXPR main SKIP ::= SKIP
EXPR int SKIP ::= SKIP
EXPR float SKIP ::= SKIP
EXPR string SKIP ::= SKIP
EXPR char SKIP ::= SKIP
EXPR boolean SKIP ::= SKIP
EXPR , SKIP ::= SKIP
EXPR ; SYNCH ::= SYNCH
EXPR input SKIP ::= SKIP
EXPR print SKIP ::= SKIP
EXPR return SKIP ::= SKIP
EXPR = SKIP ::= SKIP
EXPR if SKIP ::= SKIP
EXPR ifel SKIP ::= SKIP
EXPR while SKIP ::= SKIP
EXPR int_literal EXPR ::= TERM EXPR'
EXPR float_literal EXPR ::= TERM EXPR'
EXPR char_literal EXPR ::= TERM EXPR'
EXPR string_literal EXPR ::= TERM EXPR'
EXPR true EXPR ::= TERM EXPR'
EXPR false EXPR ::= TERM EXPR'
EXPR less_op SYNCH ::= SYNCH
EXPR greater_op SYNCH ::= SYNCH
EXPR less_eq_op SYNCH ::= SYNCH
EXPR greater_eq_op SYNCH ::= SYNCH
EXPR eq_eq_op SYNCH ::= SYNCH
EXPR not_eq_op SYNCH ::= SYNCH
EXPR logical_and SYNCH ::= SYNCH
EXPR logical_or SYNCH ::= SYNCH
EXPR ! EXPR ::= ! EXPR
EXPR + SKIP ::= SKIP
EXPR - SKIP ::= SKIP
EXPR ^ SKIP ::= SKIP
EXPR & SKIP ::= SKIP
EXPR | SKIP ::= SKIP
EXPR * SKIP ::= SKIP
EXPR / SKIP ::= SKIP
EXPR % SKIP ::= SKIP
EXPR' $ SKIP ::= SKIP
EXPR' id SKIP ::= SKIP
EXPR' ( SKIP ::= SKIP
EXPR' ) EXPR' ::= ssc
EXPR' { SKIP ::= SKIP
EXPR' } SKIP ::= SKIP
EXPR' main SKIP ::= SKIP
EXPR' int SKIP ::= SKIP
EXPR' float SKIP ::= SKIP
EXPR' string SKIP ::= SKIP
EXPR' char SKIP ::= SKIP
EXPR' boolean SKIP ::= SKIP
EXPR' , SKIP ::= SKIP
EXPR' ; EXPR' ::= ssc
EXPR' input SKIP ::= SKIP
EXPR' print SKIP ::= SKIP
EXPR' return SKIP ::= SKIP
EXPR' = SKIP ::= SKIP
EXPR' if SKIP ::= SKIP
EXPR' ifel SKIP ::= SKIP
EXPR' while SKIP ::= SKIP
EXPR' int_literal SKIP ::= SKIP
EXPR' float_literal SKIP ::= SKIP
EXPR' char_literal SKIP ::= SKIP
EXPR' string_literal SKIP ::= SKIP
EXPR' true SKIP ::= SKIP
EXPR' false SKIP ::= SKIP
EXPR' less_op EXPR' ::= ssc
EXPR' greater_op EXPR' ::= ssc
EXPR' less_eq_op EXPR' ::= ssc
EXPR' greater_eq_op EXPR' ::= ssc
EXPR' eq_eq_op EXPR' ::= ssc
EXPR' not_eq_op EXPR' ::= ssc
EXPR' logical_and EXPR' ::= ssc
EXPR' logical_or EXPR' ::= ssc
EXPR' ! SKIP ::= SKIP
EXPR' + EXPR' ::= + TERM EXPR'
EXPR' - EXPR' ::= - TERM EXPR'
EXPR' ^ EXPR' ::= ^ TERM EXPR'
EXPR' & EXPR' ::= & TERM EXPR'
EXPR' | EXPR' ::= | TERM EXPR'
EXPR' * SKIP ::= SKIP
EXPR' / SKIP ::= SKIP
EXPR' % SKIP ::= SKIP
TERM $ SKIP ::= SKIP
TERM id TERM ::= FACTOR TERM'
TERM ( TERM ::= ( EXPR ) TERM'
TERM ) SYNCH ::= SYNCH
TERM { SKIP ::= SKIP
TERM } SKIP ::= SKIP
TERM main SKIP ::= SKIP
TERM int SKIP ::= SKIP
TERM float SKIP ::= SKIP
TERM string SKIP ::= SKIP
TERM char SKIP ::= SKIP
TERM boolean SKIP ::= SKIP
TERM , SKIP ::= SKIP
TERM ; SYNCH ::= SYNCH
TERM input SKIP ::= SKIP
TERM print SKIP ::= SKIP
TERM return SKIP ::= SKIP
TERM = SKIP ::= SKIP
TERM if SKIP ::= SKIP
TERM ifel SKIP ::= SKIP
TERM while SKIP ::= SKIP
TERM int_literal TERM ::= FACTOR TERM'
TERM float_literal TERM ::= FACTOR TERM'
TERM char_literal TERM ::= FACTOR TERM'
TERM string_literal TERM ::= FACTOR TERM'
TERM true TERM ::= FACTOR TERM'
TERM false TERM ::= FACTOR TERM'
TERM less_op SYNCH ::= SYNCH
TERM greater_op SYNCH ::= SYNCH
TERM less_eq_op SYNCH ::= SYNCH
TERM greater_eq_op SYNCH ::= SYNCH
TERM eq_eq_op SYNCH ::= SYNCH
TERM not_eq_op SYNCH ::= SYNCH
TERM logical_and SYNCH ::= SYNCH
TERM logical_or SYNCH ::= SYNCH
TERM ! SKIP ::= SKIP
TERM + SYNCH ::= SYNCH
TERM - SYNCH ::= SYNCH
TERM ^ SYNCH ::= SYNCH
TERM & SYNCH ::= SYNCH
TERM | SYNCH ::= SYNCH
TERM * SKIP ::= SKIP
TERM / SKIP ::= SKIP
TERM % SKIP ::= SKIP
TERM' $ SKIP ::= SKIP
TERM' id SKIP ::= SKIP
TERM' ( SKIP ::= SKIP
TERM' ) TERM' ::= ssc
TERM' { SKIP ::= SKIP
TERM' } SKIP ::= SKIP
TERM' main SKIP ::= SKIP
TERM' int SKIP ::= SKIP
TERM' float SKIP ::= SKIP
TERM' string SKIP ::= SKIP
TERM' char SKIP ::= SKIP
TERM' boolean SKIP ::= SKIP
TERM' , SKIP ::= SKIP
TERM' ; TERM' ::= ssc
TERM' input SKIP ::= SKIP
TERM' print SKIP ::= SKIP
TERM' return SKIP ::= SKIP
TERM' = SKIP ::= SKIP
TERM' if SKIP ::= SKIP
TERM' ifel SKIP ::= SKIP
TERM' while SKIP ::= SKIP
TERM' int_literal SKIP ::= SKIP
TERM' float_literal SKIP ::= SKIP
TERM' char_literal SKIP ::= SKIP
TERM' string_literal SKIP ::= SKIP
TERM' true SKIP ::= SKIP
TERM' false SKIP ::= SKIP
TERM' less_op TERM' ::= ssc
TERM' greater_op TERM' ::= ssc
TERM' less_eq_op TERM' ::= ssc
TERM' greater_eq_op TERM' ::= ssc
TERM' eq_eq_op TERM' ::= ssc
TERM' not_eq_op TERM' ::= ssc
TERM' logical_and TERM' ::= ssc
TERM' logical_or TERM' ::= ssc
TERM' ! SKIP ::= SKIP
TERM' + TERM' ::= ssc
TERM' - TERM' ::= ssc
TERM' ^ TERM' ::= ssc
TERM' & TERM' ::= ssc
TERM' | TERM' ::= ssc
TERM' * TERM' ::= * FACTOR TERM'
TERM' / TERM' ::= / FACTOR TERM'
TERM' % TERM' ::= % FACTOR TERM'
FACTOR $ SKIP ::= SKIP
FACTOR id FACTOR ::= id
FACTOR ( SKIP ::= SKIP
FACTOR ) SYNCH ::= SYNCH
FACTOR { SKIP ::= SKIP
FACTOR } SKIP ::= SKIP
FACTOR main SKIP ::= SKIP
FACTOR int SKIP ::= SKIP
FACTOR float SKIP ::= SKIP
FACTOR string SKIP ::= SKIP
FACTOR char SKIP ::= SKIP
FACTOR boolean SKIP ::= SKIP
FACTOR , SKIP ::= SKIP
FACTOR ; SYNCH ::= SYNCH
FACTOR input SKIP ::= SKIP
FACTOR print SKIP ::= SKIP
FACTOR return SKIP ::= SKIP
FACTOR = SKIP ::= SKIP
FACTOR if SKIP ::= SKIP
FACTOR ifel SKIP ::= SKIP
FACTOR while SKIP ::= SKIP
FACTOR int_literal FACTOR ::= LITERAL
FACTOR float_literal FACTOR ::= LITERAL
FACTOR char_literal FACTOR ::= LITERAL
FACTOR string_literal FACTOR ::= LITERAL
FACTOR true FACTOR ::= LITERAL
FACTOR false FACTOR ::= LITERAL
FACTOR less_op SYNCH ::= SYNCH
FACTOR greater_op SYNCH ::= SYNCH
FACTOR less_eq_op SYNCH ::= SYNCH
FACTOR greater_eq_op SYNCH ::= SYNCH
FACTOR eq_eq_op SYNCH ::= SYNCH
FACTOR not_eq_op SYNCH ::= SYNCH
FACTOR logical_and SYNCH ::= SYNCH
FACTOR logical_or SYNCH ::= SYNCH
FACTOR ! SKIP ::= SKIP
FACTOR + SYNCH ::= SYNCH
FACTOR - SYNCH ::= SYNCH
FACTOR ^ SYNCH ::= SYNCH
FACTOR & SYNCH ::= SYNCH
FACTOR | SYNCH ::= SYNCH
FACTOR * SYNCH ::= SYNCH
FACTOR / SYNCH ::= SYNCH
FACTOR % SYNCH ::= SYNCH
